# shallow clone
clone_depth: 10

os: Visual Studio 2017

platform:
  - x64
  - x86

environment:
  matrix:
   - Toolset: "2015"
   - Toolset: "2017"
   - Toolset: mingw

cache:
  - x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z
  - i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z

branches:
  except:
    - gh-pages


install:
  - git submodule update --init --recursive
  - ps: |
      if ($env:PLATFORM -eq "x64") {
          $env:MINGW_DIR = "mingw64"
          $env:MINGW_URL = "https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/4.9.2/threads-win32/seh/x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z/download"
          $env:MINGW_ARCHIVE = "x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z"
      } else {
          $env:MINGW_DIR = "mingw32"
          $env:MINGW_URL = "https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/4.9.2/threads-win32/dwarf/i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z/download"
          $env:MINGW_ARCHIVE = "i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z"
      }
  - ps: |
      if ($env:TOOLSET -eq "mingw") {
        cmd /C 'if not exist "%MINGW_ARCHIVE%" appveyor DownloadFile "%MINGW_URL%" -FileName "%MINGW_ARCHIVE%"'
        cmd /C '7z x -y "%MINGW_ARCHIVE%" > nul'
        python -m ensurepip
        python -m pip install cpp-coveralls==0.3.11
      }
  - ps: Get-Command sh.exe -All | Remove-Item


before_build:
- ps: |
    md build
    cd build
    $generator = switch ($env:TOOLSET) {
        "2015" {"Visual Studio 14 2015"}
        "2017" {"Visual Studio 15 2017"}
        "mingw" {"MinGW Makefiles"}
    }
    if (($env:PLATFORM -eq "x64") -and ($env:TOOLSET -ne "mingw")) {
        $generator = "$generator Win64"
    }

    if ($env:TOOLSET -eq "mingw") {
        $env:PATH = "$pwd.Path\..\$env:MINGW_DIR\bin;$env:PATH"
        cmake -G "$generator" .. -DTESTING=1 -DSAMPLES=0 -DCMAKE_BUILD_TYPE=Debug
    } else {
        cmake -G "$generator" .. -DTESTING=1 -DCMAKE_CONFIGURATION_TYPES="Debug;Release"
    }
    cd ..

build:
  verbosity: minimal

build_script: |
  cd build

  if "%TOOLSET%"=="mingw" cmake --build . -- -j
  if "%APPVEYOR_REPO_TAG%"=="true" if NOT "%TOOLSET%"=="mingw" cmake --build . --config Release
  if NOT "%TOOLSET%"=="mingw" cmake --build . --config Debug

test_script:
- ps: |
    if ($env:TOOLSET -eq "mingw") {
        $env:CTEST_OUTPUT_ON_FAILURE = 1
        ctest
    } else {
        cd tests
        & .\Debug\test_all.exe
    }

after_build:
- ps: |
    if ($env:TOOLSET -eq "mingw") {
        mkdir lib
        if ($env:appveyor_repo_tag -eq "true") {
            mkdir release
            cd release
            cmake -G "$generator" ../.. -DTESTING=0 -DCMAKE_BUILD_TYPE=Release
            cmd /C 'cmake --build . -- -j'
            cp libcuhkszlib.a ..\lib
            cd ..
        } else {
            cp libcuhkszlib.a ..\lib
        }
        7z a -tzip windows-$env:PLATFORM-mingw.zip ..\build\lib ..\src\include
    } else {
      mkdir lib
      if ($env:appveyor_repo_tag -eq "true") {
        cp -r ..\build\Debug lib
        cp -r ..\build\Release lib
        if ($env:Toolset -eq "2017") {
          cp ..\build\samples\EnglishWords.txt ..\build\samples\Release
          7z a -tzip windows-$env:PLATFORM-samples.zip ..\build\samples\Release\*
        }
      } else {
        cp -r ..\build\Debug lib
      }
      7z a -tzip windows-$env:PLATFORM-msvc-$env:TOOLSET.zip lib ..\src\include ..\ide-project-files\vs-$env:PLATFORM\* ..\ide-project-files\src
    }

artifacts:
  - path: build\*.zip
    name: cuhkszlib
    type: zip

deploy:
  provider: GitHub
  description: |
    CUHKSZ C++ library release. TODO add more details.
  auth_token:
    secure: "IzRhaJiev+xncjB2O11GXuONvPyqAhmZaT5uZtVHi5u5L4C2LKtmV+Xoe7IRiOIg"
  artifact: cuhkszlib
  draft: true
  prerelease: true
  force_update: true
  on:
    appveyor_repo_tag: true
